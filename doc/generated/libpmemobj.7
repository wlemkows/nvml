.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "LIBPMEMOBJ" "7" "2017-09-26" "NVM Library - pmemobj API version 2.2" "NVML Programmer's Manual"
.hy
.\" Copyright 2014-2017, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
.PP
\f[B]libpmemobj\f[] \-\- persistent memory transactional object store
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmemobj.h>
cc\ \-std=gnu99\ ...\ \-lpmemobj\ \-lpmem
\f[]
.fi
.SS Most commonly used functions:
.IP
.nf
\f[C]
PMEMobjpool\ *pmemobj_open(const\ char\ *path,\ const\ char\ *layout);
PMEMobjpool\ *pmemobj_create(const\ char\ *path,\ const\ char\ *layout,
\ \ \ \ size_t\ poolsize,\ mode_t\ mode);
void\ pmemobj_close(PMEMobjpool\ *pop);
\f[]
.fi
.SS Low\-level memory manipulation:
.IP
.nf
\f[C]
void\ *(PMEMobjpool\ *pop,\ void\ *dest,
\ \ \ \ const\ void\ *src,\ size_t\ len);
void\ *pmemobj_memset_persist(PMEMobjpool\ *pop,\ void\ *dest,
\ \ \ \ int\ c,\ size_t\ len);
void\ pmemobj_persist(PMEMobjpool\ *pop,\ const\ void\ *addr,\ size_t\ len);
void\ pmemobj_flush(PMEMobjpool\ *pop,\ const\ void\ *addr,\ size_t\ len);
void\ pmemobj_drain(PMEMobjpool\ *pop);
\f[]
.fi
.SS Locking:
.IP
.nf
\f[C]
void\ pmemobj_mutex_zero(PMEMobjpool\ *pop,\ PMEMmutex\ *mutexp);
int\ pmemobj_mutex_lock(PMEMobjpool\ *pop,\ PMEMmutex\ *mutexp);
int\ pmemobj_mutex_timedlock(PMEMobjpool\ *pop,\ PMEMmutex\ *restrict\ mutexp,
\ \ \ \ const\ struct\ timespec\ *restrict\ abs_timeout);
int\ pmemobj_mutex_trylock(PMEMobjpool\ *pop,\ PMEMmutex\ *mutexp);
int\ pmemobj_mutex_unlock(PMEMobjpool\ *pop,\ PMEMmutex\ *mutexp);

void\ pmemobj_rwlock_zero(PMEMobjpool\ *pop,\ PMEMrwlock\ *rwlockp);
int\ pmemobj_rwlock_rdlock(PMEMobjpool\ *pop,\ PMEMrwlock\ *rwlockp);
int\ pmemobj_rwlock_wrlock(PMEMobjpool\ *pop,\ PMEMrwlock\ *rwlockp);
int\ pmemobj_rwlock_timedrdlock(PMEMobjpool\ *pop,\ PMEMrwlock\ *restrict\ rwlockp,
\ \ \ \ const\ struct\ timespec\ *restrict\ abs_timeout);
int\ pmemobj_rwlock_timedwrlock(PMEMobjpool\ *pop,\ PMEMrwlock\ *restrict\ rwlockp,
\ \ \ \ const\ struct\ timespec\ *restrict\ abs_timeout);
int\ pmemobj_rwlock_tryrdlock(PMEMobjpool\ *pop,\ PMEMrwlock\ *rwlockp);
int\ pmemobj_rwlock_trywrlock(PMEMobjpool\ *pop,\ PMEMrwlock\ *rwlockp);
int\ pmemobj_rwlock_unlock(PMEMobjpool\ *pop,\ PMEMrwlock\ *rwlockp);

void\ pmemobj_cond_zero(PMEMobjpool\ *pop,\ PMEMcond\ *condp);
int\ pmemobj_cond_broadcast(PMEMobjpool\ *pop,\ PMEMcond\ *condp);
int\ pmemobj_cond_signal(PMEMobjpool\ *pop,\ PMEMcond\ *condp);
int\ pmemobj_cond_timedwait(PMEMobjpool\ *pop,\ PMEMcond\ *restrict\ condp,
\ \ \ \ PMEMmutex\ *restrict\ mutexp,\ const\ struct\ timespec\ *restrict\ abs_timeout);
int\ pmemobj_cond_wait(PMEMobjpool\ *pop,\ PMEMcond\ *restrict\ condp,
\ \ \ \ PMEMmutex\ *restrict\ mutexp);
\f[]
.fi
.SS Persistent object identifier:
.IP
.nf
\f[C]
OID_IS_NULL(PMEMoid\ oid)
OID_EQUALS(PMEMoid\ lhs,\ PMEMoid\ rhs)
\f[]
.fi
.SS Type\-safety:
.IP
.nf
\f[C]
TOID(TYPE)
TOID_DECLARE(TYPE,\ uint64_t\ type_num)
TOID_DECLARE_ROOT(ROOT_TYPE)

TOID_TYPE_NUM(TYPE)
TOID_TYPE_NUM_OF(TOID\ oid)
TOID_VALID(TOID\ oid)
OID_INSTANCEOF(PMEMoid\ oid,\ TYPE)

TOID_ASSIGN(TOID\ oid,\ VALUE)

TOID_IS_NULL(TOID\ oid)
TOID_EQUALS(TOID\ lhs,\ TOID\ rhs)
TOID_TYPEOF(TOID\ oid)
TOID_OFFSETOF(TOID\ oid,\ FIELD)
DIRECT_RW(TOID\ oid)
DIRECT_RO(TOID\ oid)
D_RW(TOID\ oid)
D_RO(TOID\ oid)
\f[]
.fi
.SS Layout declaration:
.IP
.nf
\f[C]
POBJ_LAYOUT_BEGIN(layout)
POBJ_LAYOUT_TOID(layout,\ TYPE)
POBJ_LAYOUT_ROOT(layout,\ ROOT_TYPE)
POBJ_LAYOUT_NAME(layout)
POBJ_LAYOUT_END(layout)
POBJ_LAYOUT_TYPES_NUM(layout)
\f[]
.fi
.SS Non\-transactional atomic allocations:
.IP
.nf
\f[C]
typedef\ int\ (*pmemobj_constr)(PMEMobjpool\ *pop,\ void\ *ptr,\ void\ *arg);

int\ pmemobj_alloc(PMEMobjpool\ *pop,\ PMEMoid\ *oidp,\ size_t\ size,\ uint64_t\ type_num,
\ \ \ \ pmemobj_constr\ constructor,\ void\ *arg);
int\ pmemobj_zalloc(PMEMobjpool\ *pop,\ PMEMoid\ *oidp,\ size_t\ size,\ uint64_t\ type_num);
int\ pmemobj_xalloc(PMEMobjpool\ *pop,\ PMEMoid\ *oidp,\ size_t\ size,\ uint64_t\ type_num,
\ \ \ \ uint64_t\ flags,\ pmemobj_constr\ constructor,\ void\ *arg);
int\ pmemobj_realloc(PMEMobjpool\ *pop,\ PMEMoid\ *oidp,\ size_t\ size,\ uint64_t\ type_num);
int\ pmemobj_zrealloc(PMEMobjpool\ *pop,\ PMEMoid\ *oidp,\ size_t\ size,\ uint64_t\ type_num);
int\ pmemobj_strdup(PMEMobjpool\ *pop,\ PMEMoid\ *oidp,\ const\ char\ *s,\ uint64_t\ type_num);
int\ pmemobj_wcsdup(PMEMobjpool\ *pop,\ PMEMoid\ *oidp,\ const\ wchar_t\ *s,\ uint64_t\ type_num);
void\ pmemobj_free(PMEMoid\ *oidp);

size_t\ pmemobj_alloc_usable_size(PMEMoid\ oid);
PMEMobjpool\ *pmemobj_pool_by_oid(PMEMoid\ oid);
PMEMobjpool\ *pmemobj_pool_by_ptr(const\ void\ *addr);
void\ *pmemobj_direct(PMEMoid\ oid);
PMEMoid\ pmemobj_oid(const\ void\ *addr);\ (EXPERIMENTAL)
uint64_t\ pmemobj_type_num(PMEMoid\ oid);

POBJ_NEW(PMEMobjpool\ *pop,\ TOID\ *oidp,\ TYPE,
\ \ \ \ pmemobj_constr\ constructor,\ void\ *arg)
POBJ_ALLOC(PMEMobjpool\ *pop,\ TOID\ *oidp,\ TYPE,\ size_t\ size,
\ \ \ \ pmemobj_constr\ constructor,\ void\ *arg)
POBJ_ZNEW(PMEMobjpool\ *pop,\ TOID\ *oidp,\ TYPE)
POBJ_ZALLOC(PMEMobjpool\ *pop,\ TOID\ *oidp,\ TYPE,\ size_t\ size)
POBJ_REALLOC(PMEMobjpool\ *pop,\ TOID\ *oidp,\ TYPE,\ size_t\ size)
POBJ_ZREALLOC(PMEMobjpool\ *pop,\ TOID\ *oidp,\ TYPE,\ size_t\ size)
POBJ_FREE(TOID\ *oidp)
\f[]
.fi
.SS Root object management:
.IP
.nf
\f[C]
PMEMoid\ pmemobj_root(PMEMobjpool\ *pop,\ size_t\ size);
PMEMoid\ pmemobj_root_construct(PMEMobjpool\ *pop,\ size_t\ size,
\ \ \ \ pmemobj_constr\ constructor,\ void\ *arg);
size_t\ pmemobj_root_size(PMEMobjpool\ *pop);

POBJ_ROOT(PMEMobjpool\ *pop,\ TYPE)
\f[]
.fi
.SS Object containers:
.IP
.nf
\f[C]
PMEMoid\ pmemobj_first(PMEMobjpool\ *pop);
PMEMoid\ pmemobj_next(PMEMoid\ oid);

POBJ_FIRST_TYPE_NUM(PMEMobjpool\ *pop,\ uint64_t\ type_num)
POBJ_FIRST(PMEMobjpool\ *pop,\ TYPE)
POBJ_NEXT_TYPE_NUM(PMEMoid\ oid)
POBJ_NEXT(TOID\ oid)

POBJ_FOREACH(PMEMobjpool\ *pop,\ PMEMoid\ varoid)
POBJ_FOREACH_SAFE(PMEMobjpool\ *pop,\ PMEMoid\ varoid,\ PMEMoid\ nvaroid)
POBJ_FOREACH_TYPE(PMEMobjpool\ *pop,\ TOID\ var)
POBJ_FOREACH_SAFE_TYPE(PMEMobjpool\ *pop,\ TOID\ var,\ TOID\ nvar)
\f[]
.fi
.SS Non\-transactional persistent atomic circular doubly\-linked list:
.IP
.nf
\f[C]
int\ pmemobj_list_insert(PMEMobjpool\ *pop,\ size_t\ pe_offset,\ void\ *head,
\ \ \ \ PMEMoid\ dest,\ int\ before,\ PMEMoid\ oid);
PMEMoid\ pmemobj_list_insert_new(PMEMobjpool\ *pop,\ size_t\ pe_offset,
\ \ \ \ void\ *head,\ PMEMoid\ dest,\ int\ before,\ size_t\ size,
\ \ \ \ uint64_t\ type_num,\ pmemobj_constr\ constructor,\ void\ *arg);
int\ pmemobj_list_remove(PMEMobjpool\ *pop,\ size_t\ pe_offset,
\ \ \ \ void\ *head,\ PMEMoid\ oid,\ int\ free);
int\ pmemobj_list_move(PMEMobjpool\ *pop,
\ \ \ \ size_t\ pe_old_offset,\ void\ *head_old,
\ \ \ \ size_t\ pe_new_offset,\ void\ *head_new,
\ \ \ \ PMEMoid\ dest,\ int\ before,\ PMEMoid\ oid);

POBJ_LIST_ENTRY(TYPE)
POBJ_LIST_HEAD(HEADNAME,\ TYPE)
POBJ_LIST_FIRST(POBJ_LIST_HEAD\ *head)
POBJ_LIST_NEXT(TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)
POBJ_LIST_LAST(POBJ_LIST_HEAD\ *head,\ POBJ_LIST_ENTRY\ FIELD)
POBJ_LIST_PREV(TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)
POBJ_LIST_EMPTY(POBJ_LIST_HEAD\ *head)
POBJ_LIST_DEST_HEAD
POBJ_LIST_DEST_TAIL

POBJ_LIST_FOREACH(TOID\ var,\ POBJ_LIST_HEAD\ *head,\ POBJ_LIST_ENTRY\ FIELD)
POBJ_LIST_FOREACH_REVERSE(TOID\ var,\ POBJ_LIST_HEAD\ *head,\ POBJ_LIST_ENTRY\ FIELD)

POBJ_LIST_INSERT_HEAD(PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)
POBJ_LIST_INSERT_TAIL(PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)
POBJ_LIST_INSERT_AFTER(PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ TOID\ listelm,\ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)
POBJ_LIST_INSERT_BEFORE(PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ TOID\ listelm,\ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)
POBJ_LIST_INSERT_NEW_HEAD(PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ POBJ_LIST_ENTRY\ FIELD,\ size_t\ size,
\ \ \ \ pmemobj_constr\ constructor,\ void\ *arg)
POBJ_LIST_INSERT_NEW_TAIL(PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ POBJ_LIST_ENTRY\ FIELD,\ size_t\ size,
\ \ \ \ void\ (*constructor)(PMEMobjpool\ *pop,\ void\ *ptr,\ void\ *arg),
\ \ \ \ void\ *arg)
POBJ_LIST_INSERT_NEW_AFTER(PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ TOID\ listelm,\ POBJ_LIST_ENTRY\ FIELD,\ size_t\ size,
\ \ \ \ pmemobj_constr\ constructor,\ void\ *arg)
POBJ_LIST_INSERT_NEW_BEFORE(PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ TOID\ listelm,\ POBJ_LIST_ENTRY\ FIELD,\ size_t\ size,
\ \ \ \ pmemobj_constr\ constructor,\ void\ *arg)
POBJ_LIST_REMOVE(PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)
POBJ_LIST_REMOVE_FREE(PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD)
POBJ_LIST_MOVE_ELEMENT_HEAD(PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ POBJ_LIST_HEAD\ *head_new,\ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD,
\ \ \ \ POBJ_LIST_ENTRY\ field_new)
POBJ_LIST_MOVE_ELEMENT_TAIL(PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ POBJ_LIST_HEAD\ *head_new,\ TOID\ elm,\ POBJ_LIST_ENTRY\ FIELD,
\ \ \ \ POBJ_LIST_ENTRY\ field_new)
POBJ_LIST_MOVE_ELEMENT_AFTER(PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ POBJ_LIST_HEAD\ *head_new,\ TOID\ listelm,\ TOID\ elm,
\ \ \ \ POBJ_LIST_ENTRY\ FIELD,\ POBJ_LIST_ENTRY\ field_new)
POBJ_LIST_MOVE_ELEMENT_BEFORE(PMEMobjpool\ *pop,\ POBJ_LIST_HEAD\ *head,
\ \ \ \ POBJ_LIST_HEAD\ *head_new,\ TOID\ listelm,\ TOID\ elm,
\ \ \ \ POBJ_LIST_ENTRY\ FIELD,\ POBJ_LIST_ENTRY\ field_new)
\f[]
.fi
.SS Transactional object manipulation:
.IP
.nf
\f[C]
enum\ tx_stage\ pmemobj_tx_stage(void);

int\ pmemobj_tx_begin(PMEMobjpool\ *pop,\ jmp_buf\ *env,\ enum\ pobj_tx_param,\ ...);
int\ pmemobj_tx_lock(enum\ tx_lock\ lock_type,\ void\ *lockp);
void\ pmemobj_tx_abort(int\ errnum);
void\ pmemobj_tx_commit(void);
int\ pmemobj_tx_end(void);
int\ pmemobj_tx_errno(void);
void\ pmemobj_tx_process(void);

int\ pmemobj_tx_add_range(PMEMoid\ oid,\ uint64_t\ off,\ size_t\ size);
int\ pmemobj_tx_add_range_direct(const\ void\ *ptr,\ size_t\ size);
int\ pmemobj_tx_xadd_range(PMEMoid\ oid,\ uint64_t\ off,\ size_t\ size,\ uint64_t\ flags);\ (EXPERIMENTAL)
int\ pmemobj_tx_xadd_range_direct(const\ void\ *ptr,\ size_t\ size,\ uint64_t\ flags);\ (EXPERIMENTAL)

PMEMoid\ pmemobj_tx_alloc(size_t\ size,\ uint64_t\ type_num);
PMEMoid\ pmemobj_tx_zalloc(size_t\ size,\ uint64_t\ type_num);
PMEMoid\ pmemobj_tx_xalloc(size_t\ size,\ uint64_t\ type_num,\ uint64_t\ flags);\ (EXPERIMENTAL)
PMEMoid\ pmemobj_tx_realloc(PMEMoid\ oid,\ size_t\ size,\ uint64_t\ type_num);
PMEMoid\ pmemobj_tx_zrealloc(PMEMoid\ oid,\ size_t\ size,\ uint64_t\ type_num);
PMEMoid\ pmemobj_tx_strdup(const\ char\ *s,\ uint64_t\ type_num);
PMEMoid\ pmemobj_tx_wcsdup(const\ wchar_t\ *s,\ uint64_t\ type_num);
int\ pmemobj_tx_free(PMEMoid\ oid);

TX_BEGIN_PARAM(PMEMobjpool\ *pop,\ ...)
TX_BEGIN_CB(PMEMobjpool\ *pop,\ cb,\ arg,\ ...)\ (EXPERIMENTAL)
TX_BEGIN(PMEMobjpool\ *pop)
TX_ONABORT
TX_ONCOMMIT
TX_FINALLY
TX_END

TX_ADD(TOID\ o)
TX_ADD_FIELD(TOID\ o,\ FIELD)
TX_ADD_DIRECT(TYPE\ *p)
TX_ADD_FIELD_DIRECT(TYPE\ *p,\ FIELD)

TX_XADD(TOID\ o,\ uint64_t\ flags)\ (EXPERIMENTAL)
TX_XADD_FIELD(TOID\ o,\ FIELD,\ uint64_t\ flags)\ (EXPERIMENTAL)
TX_XADD_DIRECT(TYPE\ *p,\ uint64_t\ flags)\ (EXPERIMENTAL)
TX_XADD_FIELD_DIRECT(TYPE\ *p,\ FIELD,\ uint64_t\ flags)\ (EXPERIMENTAL)

TX_NEW(TYPE)
TX_ALLOC(TYPE,\ size_t\ size)
TX_ZNEW(TYPE)
TX_ZALLOC(TYPE,\ size_t\ size)
TX_XALLOC(TYPE,\ size_t\ size,\ uint64_t\ flags)\ (EXPERIMENTAL)
TX_REALLOC(TOID\ o,\ size_t\ size)
TX_ZREALLOC(TOID\ o,\ size_t\ size)
TX_STRDUP(const\ char\ *s,\ uint64_t\ type_num)
TX_WCSDUP(const\ wchar_t\ *s,\ uint64_t\ type_num)
TX_FREE(TOID\ o)

TX_SET(TOID\ o,\ FIELD,\ VALUE)
TX_SET_DIRECT(TYPE\ *p,\ FIELD,\ VALUE)
TX_MEMCPY(void\ *dest,\ const\ void\ *src,\ size_t\ num)
TX_MEMSET(void\ *dest,\ int\ c,\ size_t\ num)
\f[]
.fi
.SS Library API versioning:
.IP
.nf
\f[C]
const\ char\ *pmemobj_check_version(
\ \ \ \ unsigned\ major_required,
\ \ \ \ unsigned\ minor_required);
\f[]
.fi
.SS Managing library behavior:
.IP
.nf
\f[C]
void\ pmemobj_set_funcs(
\ \ \ \ void\ *(*malloc_func)(size_t\ size),
\ \ \ \ void\ (*free_func)(void\ *ptr),
\ \ \ \ void\ *(*realloc_func)(void\ *ptr,\ size_t\ size),
\ \ \ \ char\ *(*strdup_func)(const\ char\ *s));

int\ pmemobj_check(const\ char\ *path,\ const\ char\ *layout);
\f[]
.fi
.SS Error handling:
.IP
.nf
\f[C]
const\ char\ *pmemobj_errormsg(void);
\f[]
.fi
.SS Control and statistics:
.IP
.nf
\f[C]
int\ pmemobj_ctl_get(PMEMobjpool\ *pop,\ const\ char\ *name,\ void\ *arg);\ (EXPERIMENTAL)
int\ pmemobj_ctl_set(PMEMobjpool\ *pop,\ const\ char\ *name,\ void\ *arg);\ (EXPERIMENTAL)
\f[]
.fi
.SH DESCRIPTION
.PP
\f[B]libpmemobj\f[] provides a transactional object store in
\f[I]persistent memory\f[] (pmem).
This library is intended for applications using direct access storage
(DAX), which is storage that supports load/store access without paging
blocks from a block storage device.
Some types of \f[I]non\-volatile memory DIMMs\f[] (NVDIMMs) provide this
type of byte addressable access to storage.
A \f[I]persistent memory aware file system\f[] is typically used to
expose the direct access to applications.
Memory mapping a file from this type of file system results in the
load/store, non\-paged access to pmem.
\f[B]libpmemobj\f[] builds on this type of memory mapped file.
.PP
This library is for applications that need a transactions and persistent
memory management.
The \f[B]libpmemobj\f[] requires a \f[B]\-std=gnu99\f[] compilation flag
to build properly.
This library builds on the low\-level pmem support provided by
\f[B]libpmem\f[], handling the transactional updates, flushing changes
to persistence, and recovery for the application.
.PP
\f[B]libpmemobj\f[] is one of a collection of persistent memory
libraries available, the others are:
.IP \[bu] 2
\f[B]libpmemblk\f[](3), providing pmem\-resident arrays of fixed\-sized
blocks with atomic updates.
.IP \[bu] 2
\f[B]libpmemlog\f[](3), providing a pmem\-resident log file.
.IP \[bu] 2
\f[B]libpmem\f[](3), low\-level persistent memory support.
.PP
Under normal usage, \f[B]libpmemobj\f[] will never print messages or
intentionally cause the process to exit.
The only exception to this is the debugging information, when enabled,
as described under \f[B]DEBUGGING AND ERROR HANDLING\f[] below.
.SH LIBRARY API VERSIONING
.PP
This section describes how the library API is versioned, allowing
applications to work with an evolving API.
.IP
.nf
\f[C]
const\ char\ *pmemobj_check_version(
\ \ \ \ unsigned\ major_required,
\ \ \ \ unsigned\ minor_required);
\f[]
.fi
.PP
The \f[B]pmemobj_check_version\f[]() function is used to see if the
installed \f[B]libpmemobj\f[] supports the version of the library API
required by an application.
The easiest way to do this is for the application to supply the
compile\-time version information, supplied by defines in
\f[B]<libpmemobj.h>\f[], like this:
.IP
.nf
\f[C]
reason\ =\ pmemobj_check_version(PMEMOBJ_MAJOR_VERSION,
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ PMEMOBJ_MINOR_VERSION);
if\ (reason\ !=\ NULL)\ {
\ \ \ \ /*\ version\ check\ failed,\ reason\ string\ tells\ you\ why\ */
}
\f[]
.fi
.PP
Any mismatch in the major version number is considered a failure, but a
library with a newer minor version number will pass this check since
increasing minor versions imply backwards compatibility.
.PP
An application can also check specifically for the existence of an
interface by checking for the version where that interface was
introduced.
These versions are documented in this man page as follows: unless
otherwise specified, all interfaces described here are available in
version 1.0 of the library.
Interfaces added after version 1.0 will contain the text \f[I]introduced
in version x.y\f[] in the section of this manual describing the feature.
.PP
When the version check performed by \f[B]pmemobj_check_version\f[]() is
successful, the retur value is NULL.
Otherwise the return value is a static string describing the reason for
failing the version check.
The string returned by \f[B]pmemobj_check_version\f[]() must not be
modified or freed.
.SH MANAGING LIBRARY BEHAVIOR
.PP
The library entry points described in this section are less commonly
used than the previous sections.
.IP
.nf
\f[C]
void\ pmemobj_set_funcs(
\ \ \ \ void\ *(*malloc_func)(size_t\ size),
\ \ \ \ void\ (*free_func)(void\ *ptr),
\ \ \ \ void\ *(*realloc_func)(void\ *ptr,\ size_t\ size),
\ \ \ \ char\ *(*strdup_func)(const\ char\ *s));
\f[]
.fi
.PP
The \f[B]pmemobj_set_funcs\f[]() function allows an application to
override memory allocation calls used internally by \f[B]libpmemobj\f[].
Passing in NULL for any of the handlers will cause the
\f[B]libpmemobj\f[] default function to be used.
The library does not make heavy use of the system malloc functions, but
it does allocate approximately 4\-8 kilobytes for each memory pool in
use.
.IP
.nf
\f[C]
int\ pmemobj_check(const\ char\ *path,\ const\ char\ *layout);
\f[]
.fi
.PP
The \f[B]pmemobj_check\f[]() function performs a consistency check of
the file indicated by \f[I]path\f[] and returns 1 if the memory pool is
found to be consistent.
Any inconsistencies found will cause \f[B]pmemobj_check\f[]() to return
0, in which case the use of the file with \f[B]libpmemobj\f[] will
result in undefined behavior.
The debug version of \f[B]libpmemobj\f[] will provide additional details
on inconsistencies when \f[B]PMEMOBJ_LOG_LEVEL\f[] is at least 1, as
described in the \f[B]DEBUGGING ANDERROR HANDLING\f[] section below.
\f[B]pmemobj_check\f[]() will return \-1 and set \f[I]errno\f[] if it
cannot perform the consistency check due to other errors.
\f[B]pmemobj_check\f[]() opens the given \f[I]path\f[] read\-only so it
never makes any changes to the file.
This function is not supported on Device DAX.
.SH DEBUGGING AND ERROR HANDLING
.PP
Two versions of \f[B]libpmemobj\f[] are typically available on a
development system.
The normal version, accessed when a program is linked using the
\f[B]\-lpmemobj\f[] option, is optimized for performance.
That version skips checks that impact performance and never logs any
trace information or performs any run\-time assertions.
If an error is detected during the call to \f[B]libpmemobj\f[] function,
an application may retrieve an error message describing the reason of
failure using the following function:
.IP
.nf
\f[C]
const\ char\ *pmemobj_errormsg(void);
\f[]
.fi
.PP
The \f[B]pmemobj_errormsg\f[]() function returns a pointer to a static
buffer containing the last error message logged for current thread.
The error message may include description of the corresponding error
code (if \f[I]errno\f[] was set), as returned by \f[B]strerror\f[](3).
The error message buffer is thread\-local; errors encountered in one
thread do not affect its value in other threads.
The buffer is never cleared by any library function; its content is
significant only when the return value of the immediately preceding call
to \f[B]libpmemobj\f[] function indicated an error, or if \f[I]errno\f[]
was set.
The application must not modify or free the error message string, but it
may be modified by subsequent calls to other library functions.
.PP
A second version of \f[B]libpmemobj\f[], accessed when a program uses
the libraries under \f[B]/usr/lib/nvml_debug\f[], contains run\-time
assertions and trace points.
The typical way to access the debug version is to set the environment
variable \f[B]LD_LIBRARY_PATH\f[] to \f[B]/usr/lib/nvml_debug\f[] or
\f[B]/usr/lib64/nvml_debug\f[] depending on where the debug libraries
are installed on the system.
The trace points in the debug version of the library are enabled using
the environment variable \f[B]PMEMOBJ_LOG_LEVEL\f[] which can be set to
the following values:
.IP \[bu] 2
\f[B]0\f[] \- This is the default level when \f[B]PMEMOBJ_LOG_LEVEL\f[]
is not set.
No log messages are emitted at this level.
.IP \[bu] 2
\f[B]1\f[] \- Additional details on any errors detected are logged (in
addition to returning the \f[I]errno\f[]\-based errors as usual).
The same information may be retrieved using \f[B]pmemobj_errormsg\f[]().
.IP \[bu] 2
\f[B]2\f[] \- A trace of basic operations is logged.
.IP \[bu] 2
\f[B]3\f[] \- This level enables a very verbose amount of function call
tracing in the library.
.IP \[bu] 2
\f[B]4\f[] \- This level enables voluminous and fairly obscure tracing
information that is likely only useful to the \f[B]libpmemobj\f[]
developers.
.PP
The environment variable \f[B]PMEMOBJ_LOG_FILE\f[] specifies a file name
where all logging information should be written.
If the last character in the name is "\-", the PID of the current
process will be appended to the file name when the log file is created.
If \f[B]PMEMOBJ_LOG_FILE\f[] is not set, the logging output goes to
stderr.
.PP
Setting the environment variable \f[B]PMEMOBJ_LOG_LEVEL\f[] has no
effect on the non\-debug version of \f[B]libpmemobj\f[].
See also \f[B]libpmem\f[](3) to get information about other environment
variables affecting \f[B]libpmemobj\f[] behavior.
.PP
\f[B]libpmemobj\f[] by default supports up to 1024 parallel transactions
/ allocations.
For debugging purposes it is possible to decrease this value by writing
a desired limit to the \f[B]PMEMOBJ_NLANES\f[] environment variable.
.SH CONTROL AND STATISTICS
.PP
The library provides a uniform interface that allows to impact its
behavior as well as reason about its internals.
.PP
There are two main functions to that interface:
.IP
.nf
\f[C]
int\ pmemobj_ctl_get(PMEMobjpool\ *pop,\ const\ char\ *name,\ void\ *arg);\ (EXPERIMENTAL)
int\ pmemobj_ctl_set(PMEMobjpool\ *pop,\ const\ char\ *name,\ void\ *arg);\ (EXPERIMENTAL)
\f[]
.fi
.PP
For more details look at \f[B]pmemobj_ctl_get\f[](3) and
\f[B]pmemobj_ctl_set\f[](3) manpages.
.SH EXAMPLE
.PP
See <http://pmem.io/nvml/libpmemobj> for examples using the
\f[B]libpmemobj\f[] API.
.SH ACKNOWLEDGEMENTS
.PP
\f[B]libpmemobj\f[] builds on the persistent memory programming model
recommended by the SNIA NVM Programming Technical Work Group:
<http://snia.org/nvmp>
.SH SEE ALSO
.PP
\f[B]pmemobj_ctl_get\f[](3), \f[B]pmemobj_ctl_set\f[](3),
\f[B]strerror\f[](3), \f[B]libpmemblk\f[](7), \f[B]libpmemlog\f[](7),
\f[B]libpmem\f[](7), \f[B]libvmem\f[](7) and \f[B]<http://pmem.io>\f[]
