.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "PMEMPOOL_SYNC" "3" "2017-11-07" "NVM Library - pmempool API version 1.1" "NVML Programmer's Manual"
.hy
.\" Copyright 2014-2017, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
.PP
\f[B]pmempool_sync\f[](), \f[B]pmempool_transform\f[]() \-\- pool file
or pool set synchronization and transformation
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmempool.h>

int\ pmempool_sync(const\ char\ *poolset_file,\ unsigned\ flags);\ (EXPERIMENTAL)
int\ pmempool_transform(const\ char\ *poolset_file_src,
\ \ \ \ const\ char\ *poolset_file_dst,
\ \ \ \ unsigned\ flags);\ (EXPERIMENTAL)
\f[]
.fi
.SH DESCRIPTION
.PP
The \f[B]pmempool_sync\f[]() function synchronizes data between replicas
within a pool set.
.PP
\f[B]pmempool_sync\f[]() accepts two arguments:
.IP \[bu] 2
\f[I]poolset_file\f[] \- a path to a pool set file,
.IP \[bu] 2
\f[I]flags\f[] \- a combination of flags (ORed) which modify the way of
synchronization.
.RS
.PP
NOTE: Only the pool set file used to create the pool should be used for
syncing the pool.
.RE
.PP
The following flags are available:
.IP \[bu] 2
\f[B]PMEMPOOL_DRY_RUN\f[] \- do not apply changes, only check for
viability of synchronization.
.PP
\f[B]pmempool_sync\f[]() function checks if metadata of all replicas in
a pool set are consistent, i.e.
all parts are healthy, and if any of them is not, the corrupted or
missing parts are recreated and filled with data from one of the healthy
replicas.
.PP
The \f[B]pmempool_transform\f[]() function modifies internal structure
of a pool set.
It supports the following operations:
.IP \[bu] 2
adding one or more replicas,
.IP \[bu] 2
removing one or more replicas,
.IP \[bu] 2
reordering of replicas.
.PP
\f[B]pmempool_transform\f[]() accepts three arguments:
.IP \[bu] 2
\f[I]poolset_file_src\f[] \- a path to a pool set file which defines the
source pool set to be changed,
.IP \[bu] 2
\f[I]poolset_file_dst\f[] \- a path to a pool set file which defines the
target structure of the pool set,
.IP \[bu] 2
\f[I]flags\f[] \- a combination of flags (ORed) which modify the way of
synchronization.
.PP
The following flags are available:
.IP \[bu] 2
\f[B]PMEMPOOL_DRY_RUN\f[] \- do not apply changes, only check for
viability of synchronization.
.PP
When adding or deleting replicas, the two pool set files can differ only
in the definitions of replicas which are to be added or deleted.
One cannot add and remove replicas in the same step.
Only one of these operations can be performed at a time.
Reordering replicas can be combined with any of them.
Also, to add a replica it is necessary for its effective size to match
or exceed the pool size.
Otherwise the whole operation fails and no changes are applied.
Effective size of a replica is the sum of sizes of all its part files
decreased by 4096 bytes per each part file.
The 4096 bytes of each part file is utilized for storing internal
metadata of the pool part files.
.SH RETURN VALUE
.PP
The \f[B]pmempool_sync\f[]() function returns either 0 on success or \-1
in case of error with proper \f[I]errno\f[] set accordingly.
.PP
The \f[B]pmempool_transform\f[]() function returns either 0 on success
or \-1 in case of error with proper \f[I]errno\f[] set accordingly.
.SH NOTES
.PP
Currently, the following operations are allowed only for
\f[B]pmemobj\f[] pools (see \f[B]libpmemobj\f[](7)).
.PP
The \f[B]pmempool_sync\f[]() API is experimental and it may change in
future versions of the library.
.PP
The \f[B]pmempool_transform\f[]() API is experimental and it may change
in future versions of the library.
.SH SEE ALSO
.PP
\f[B]libpmemlog\f[](7), \f[B]libpmemobj\f[](7) and
\f[B]<http://pmem.io>\f[]
