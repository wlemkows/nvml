.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "PMEM_IS_PMEM" "3" "2017-09-26" "NVM Library - pmem API version 1.0" "NVML Programmer's Manual"
.hy
.\" Copyright 2014-2017, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
.PP
\f[B]pmem_is_pmem\f[](), \f[B]pmem_persist\f[](), \f[B]pmem_msync\f[](),
\f[B]pmem_map_file\f[](), \f[B]pmem_unmap\f[]() \-\- check persistency,
store persistent data and delete mappings
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmem.h>

int\ pmem_is_pmem(const\ void\ *addr,\ size_t\ len);
void\ pmem_persist(const\ void\ *addr,\ size_t\ len);
int\ pmem_msync(const\ void\ *addr,\ size_t\ len);
void\ *pmem_map_file(const\ char\ *path,\ size_t\ len,\ int\ flags,
\ \ \ \ mode_t\ mode,\ size_t\ *mapped_lenp,\ int\ *is_pmemp);
int\ pmem_unmap(void\ *addr,\ size_t\ len);
\f[]
.fi
.SH DESCRIPTION
.PP
Most pmem\-aware applications will take advantage of higher level
libraries that alleviate the application from calling into
\f[B]libpmem\f[] directly.
Application developers that wish to access raw memory mapped persistence
directly (via \f[B]mmap\f[](2)) and that wish to take on the
responsibility for flushing stores to persistence will find the
functions described in this section to be the most commonly used.
.PP
The \f[B]pmem_is_pmem\f[]() function detects if the entire range
[\f[I]addr\f[], \f[I]addr\f[]+\f[I]len\f[]) consists of persistent
memory.
The implementation of \f[B]pmem_is_pmem\f[]() requires a non\-trivial
amount of work to determine if the given range is entirely persistent
memory.
For this reason, it is better to call \f[B]pmem_is_pmem\f[]() once when
a range of memory is first encountered, save the result, and use the
saved result to determine whether \f[B]pmem_persist\f[]() or
\f[B]msync\f[](2) is appropriate for flushing changes to persistence.
Calling \f[B]pmem_is_pmem\f[]() each time changes are flushed to
persistence will not perform well.
.RS
.PP
WARNING: Using \f[B]pmem_persist\f[]() on a range where
\f[B]pmem_is_pmem\f[]() returns false may not do anything useful \-\-
use \f[B]msync\f[](2) instead.
.RE
.PP
The \f[B]pmem_persist\f[]() function force any changes in the range
[\f[I]addr\f[], \f[I]addr\f[]+\f[I]len\f[]) to be stored durably in
persistent memory.
This is equivalent to calling \f[B]msync\f[](2) but may be more optimal
and will avoid calling into the kernel if possible.
There are no alignment restrictions on the range described by
\f[I]addr\f[] and \f[I]len\f[], but \f[B]pmem_persist\f[]() may expand
the range as necessary to meet platform alignment requirements.
.RS
.PP
WARNING: Like \f[B]msync\f[](2), there is nothing atomic or
transactional about this call.
Any unwritten stores in the given range will be written, but some stores
may have already been written by virtue of normal cache
eviction/replacement policies.
Correctly written code must not depend on stores waiting until
\f[B]pmem_persist\f[]() is called to become persistent \-\- they can
become persistent at any time before \f[B]pmem_persist\f[]() is called.
.RE
.PP
The \f[B]pmem_msync\f[]() function is like \f[B]pmem_persist\f[]() in
that it forces any changes in the range [\f[I]addr\f[],
\f[I]addr\f[]+\f[I]len\f[]) to be stored durably.
Since it calls \f[B]msync\f[](), this function works on either
persistent memory or a memory mapped file on traditional storage.
\f[B]pmem_msync\f[]() takes steps to ensure the alignment of addresses
and lengths passed to \f[B]msync\f[]() meet the requirements of that
system call.
It calls \f[B]msync\f[]() with the \f[B]MS_SYNC\f[] flag as described in
\f[B]msync\f[](2).
Typically the application only checks for the existence of persistent
memory once, and then uses that result throughout the program, for
example:
.IP
.nf
\f[C]
/*\ do\ this\ call\ once,\ after\ the\ pmem\ is\ memory\ mapped\ */
int\ is_pmem\ =\ pmem_is_pmem(rangeaddr,\ rangelen);

/*\ ...\ make\ changes\ to\ a\ range\ of\ pmem\ ...\ */

/*\ make\ the\ changes\ durable\ */
if\ (is_pmem)
\ \ \ \ pmem_persist(subrangeaddr,\ subrangelen);
else
\ \ \ \ pmem_msync(subrangeaddr,\ subrangelen);

/*\ ...\ */
\f[]
.fi
.RS
.PP
WARNING: On Linux, \f[B]pmem_msync\f[]() and \f[B]msync\f[](2) have no
effect on memory ranges mapped from Device DAX.
In case of memory ranges where \f[B]pmem_is_pmem\f[]() returns true use
\f[B]pmem_persist\f[]() to force the changes to be stored durably in
persistent memory.
.RE
.PP
The \f[B]pmem_map_file\f[]() function creates a new read/write mapping
for the given \f[I]path\f[] file.
It will map the file using \f[B]mmap\f[](2), but it also takes extra
steps to make large page mappings more likely.
.PP
On success, \f[B]pmem_map_file\f[]() returns a pointer to mapped area.
If \f[I]mapped_lenp\f[] is not NULL, the length of the mapping is also
stored at the address it points to.
The \f[I]is_pmemp\f[] argument, if non\-NULL, points to a flag that
\f[B]pmem_is_pmem\f[]() sets to say if the mapped file is actual pmem,
or if \f[B]msync\f[]() must be used to flush writes for the mapped
range.
On error, NULL is returned, \f[I]errno\f[] is set appropriately, and
\f[I]mapped_lenp\f[] and \f[I]is_pmemp\f[] are left untouched.
.PP
The \f[I]flags\f[] argument can be 0 or bitwise OR of one or more of the
following file creation flags:
.IP \[bu] 2
\f[B]PMEM_FILE_CREATE\f[] \- Create the named file if it does not exist.
\f[I]len\f[] must be non\-zero and specifies the size of the file to be
created.
\f[I]mode\f[] has the same meaning as for \f[B]open\f[](2) and specifies
the mode to use in case a new file is created.
If neither \f[B]PMEM_FILE_CREATE\f[] nor \f[B]PMEM_FILE_TMPFILE\f[] is
specified, then \f[I]mode\f[] is ignored.
.IP \[bu] 2
\f[B]PMEM_FILE_EXCL\f[] \- Same meaning as \f[B]O_EXCL\f[] on
\f[B]open\f[](2) \- Ensure that this call creates the file.
If this flag is specified in conjunction with \f[B]PMEM_FILE_CREATE\f[],
and pathname already exists, then \f[B]pmem_map_file\f[]() will fail.
.IP \[bu] 2
\f[B]PMEM_FILE_TMPFILE\f[] \- Same meaning as \f[B]O_TMPFILE\f[] on
\f[B]open\f[](2).
Create a mapping for an unnamed temporary file.
\f[B]PMEM_FILE_CREATE\f[] and \f[I]len\f[] must be specified and
\f[I]path\f[] must be an existing directory name.
.IP \[bu] 2
\f[B]PMEM_FILE_SPARSE\f[] \- When creating a file, create a sparse
(holey) file instead of calling \f[B]posix_fallocate\f[](2).
Valid only if specified in conjunction with \f[B]PMEM_FILE_CREATE\f[] or
\f[B]PMEM_FILE_TMPFILE\f[], otherwise ignored.
.PP
If creation flags are not supplied, then \f[B]pmem_map_file\f[]()
creates a mapping for an existing file.
In such case, \f[I]len\f[] should be zero.
The entire file is mapped to memory; its length is used as the length of
the mapping and returned via \f[I]mapped_lenp\f[].
.PP
The path of a file can point to a Device DAX and in such case only
\f[B]PMEM_FILE_CREATE\f[] and \f[B]PMEM_FILE_SPARSE\f[] flags are valid,
but they both effectively do nothing.
For Device DAX mappings, the \f[I]len\f[] argument must be, regardless
of the flags, equal to either 0 or the exact size of the device.
.PP
To delete mappings created with \f[B]pmem_map_file\f[](), use
\f[B]pmem_unmap\f[]().
.PP
The \f[B]pmem_unmap\f[]() function deletes all the mappings for the
specified address range, and causes further references to addresses
within the range to generate invalid memory references.
It will use the address specified by the parameter \f[I]addr\f[], where
\f[I]addr\f[] must be a previously mapped region.
\f[B]pmem_unmap\f[]() will delete the mappings using the
\f[B]munmap\f[](2).
.SH RETURN VALUE
.PP
The \f[B]pmem_is_pmem\f[]() function returns true only if the entire
range [\f[I]addr\f[], \f[I]addr\f[]+\f[I]len\f[]) consists of persistent
memory.
A true return from \f[B]pmem_is_pmem\f[]() means it is safe to use
\f[B]pmem_persist\f[]() and the related functions to make changes
durable for that memory range.
.PP
The \f[B]pmem_persist\f[]() function returns no value.
.PP
The \f[B]pmem_msync\f[]() return value is the return value of
\f[B]msync\f[](), which can return \-1 and set \f[I]errno\f[] to
indicate an error.
.PP
The \f[B]pmem_map_file\f[]() function returns no value.
.PP
The \f[B]pmem_unmap\f[]() function on success returns zero.
On error, \-1 is returned, and \f[I]errno\f[] is set appropriately.
.SH NOTES
.PP
On Linux, \f[B]pmem_is_pmem\f[]() returns true only if the entire range
is mapped directly from Device DAX (/dev/daxX.Y) without an intervening
file system.
In the future, as file systems become available that support flushing
with \f[B]pmem_persist\f[](), \f[B]pmem_is_pmem\f[]() will return true
as appropriate.
.SH SEE ALSO
.PP
\f[B]mmap\f[](2), \f[B]msync\f[](2), \f[B]munmap\f[](2),
\f[B]posix_fallocate\f[](2), \f[B]libpmem\f[](7) and
\f[B]<http://pmem.io>\f[]
