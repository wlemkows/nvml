.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "RPMEM_CREATE" "3" "2017-11-07" "NVM Library - rpmem API version 1.1" "NVML Programmer's Manual"
.hy
.\" Copyright 2014-2017, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
.PP
\f[B]rpmem_create\f[](), \f[B]rpmem_open\f[](),
\f[B]rpmem_set_attr\f[](), \f[B]rpmem_close\f[](),
\f[B]rpmem_remove\f[]() \-\- most commonly used functions to remote
access to \f[I]persistent memory\f[]
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <librpmem.h>

RPMEMpool\ *rpmem_create(const\ char\ *target,\ const\ char\ *pool_set_name,
\ \ \ \ void\ *pool_addr,\ size_t\ pool_size,\ unsigned\ *nlanes,
\ \ \ \ const\ struct\ rpmem_pool_attr\ *create_attr);
RPMEMpool\ *rpmem_open(const\ char\ *target,\ const\ char\ *pool_set_name,
\ \ \ \ void\ *pool_addr,\ size_t\ pool_size,\ unsigned\ *nlanes,
\ \ \ \ struct\ rpmem_pool_attr\ *open_attr);
int\ rpmem_set_attr(RPMEMpool\ *rpp,\ const\ struct\ rpmem_pool_attr\ *attr);
int\ rpmem_close(RPMEMpool\ *rpp);
int\ rpmem_remove(const\ char\ *target,\ const\ char\ *pool_set_name,\ int\ flags);
\f[]
.fi
.SH DESCRIPTION
.PP
The \f[B]rpmem_create\f[]() function creates a remote pool on a given
\f[I]target\f[] node.
The \f[I]pool_set_name\f[] is a relative path in the root config
directory on the \f[I]target\f[] node that uniquely identifies the pool
set file on remote node to be used when mapping the remote pool.
The \f[I]pool_addr\f[] is a pointer to the associated local memory pool
of a given size specified by the \f[I]pool_size\f[] argument.
Both \f[I]pool_addr\f[] and \f[I]pool_size\f[] must be aligned to
system\[aq]s page size (see \f[B]sysconf\f[](3)).
The size of the remote pool must be at least \f[I]pool_size\f[].
See \f[B]REMOTE POOL SIZE\f[] section for details.
The \f[I]nlanes\f[] points to the maximum number of lanes which the
caller requests to use.
Upon successful creation of the remote pool, the \f[I]nlanes\f[]
contains the maximum number of lanes supported by both local and remote
nodes\[aq] hardware.
See \f[B]LANES\f[] subsection in \f[B]NOTES\f[] section for details.
The \f[I]create_attr\f[] structure contains the attributes used for
creating the remote pool.
If \f[I]create_attr\f[] is NULL, a zeroed structure with attributes will
be used to create the pool.
The attributes are stored in pool\[aq]s meta\-data and can be read when
opening the remote pool using \f[B]rpmem_open\f[]() function call
.PP
The \f[B]rpmem_open\f[]() function opens an existing remote pool on a
given \f[I]target\f[] node.
The \f[I]pool_set_name\f[] is a relative path in the root config
directory on the \f[I]target\f[] node that uniquely identifies the pool
set file on remote node to be used when mapping the remote pool.
The \f[I]pool_addr\f[] is a pointer to the associated local memory pool
of a given size specified by the \f[I]pool_size\f[] argument.
Both \f[I]pool_addr\f[] and \f[I]pool_size\f[] must be aligned to
system\[aq]s page size (see \f[B]sysconf\f[](3)).
The size of the remote pool must be at least \f[I]pool_size\f[].
See \f[B]REMOTE POOL SIZE\f[] subsection in \f[B]NOTES\f[] section for
details.
The \f[I]nlanes\f[] points to the maximum number of lanes which the
caller requests to use.
Upon successful opening of the remote pool, the \f[I]nlanes\f[] contains
the maximum number of lanes supported by both local and remote
nodes\[aq] hardware.
See \f[B]LANES\f[] subsection in \f[B]NOTES\f[] section for details.
.PP
The \f[B]rpmem_set_attr\f[]() function overwrites pool\[aq]s attributes.
The \f[I]attr\f[] structure contains the attributes used for overwriting
the remote pool attributes that were passed to \f[B]rpmem_create\f[]()
at pool\[aq]s creation.
If \f[I]attr\f[] is NULL, a zeroed structure with attributes will be
used.
New attributes are stored in pool\[aq]s meta\-data.
.PP
The \f[B]rpmem_close\f[]() function closes a remote pool indicated by
\f[I]rpp\f[].
All resources are released on both local and remote side.
The pool itself lives on the remote node and may be re\-opened at a
later time using \f[B]rpmem_open\f[]() function as described above.
.PP
The \f[B]rpmem_remove\f[]() function removes a remote pool on a given
\f[I]target\f[] node.
The \f[I]pool_set_name\f[] is a relative path in the root config
directory on the \f[I]target\f[] node that uniquely identifies the pool
set file on remote node.
By default only the pool part files are removed and pool set file is
left untouched.
If the pool is not consistent the \f[B]rpmem_remove\f[]() function
fails.
The \f[I]flags\f[] argument determines the behavior of
\f[B]rpmem_remove\f[]() function.
It is either 0 or the bitwise OR of one or more of the following flags:
.IP \[bu] 2
\f[B]RPMEM_REMOVE_FORCE\f[] Ignore errors when opening inconsistent
pool.
The pool set file must be in appropriate format though.
.IP \[bu] 2
\f[B]RPMEM_REMOVE_POOL_SET\f[] Remove pool set file after removing the
pool described by this pool set.
.SH RETURN VALUE
.PP
The \f[B]rpmem_create\f[]() upon success returns an opaque handle to the
remote pool which shall be used in subsequent API calls.
If any error prevents the \f[B]librpmem\f[](7) from creating the remote
pool, the \f[B]rpmem_create\f[]() returns NULL and sets \f[I]errno\f[]
appropriately.
.PP
The \f[B]rpmem_open\f[]() function upon success returns an opaque handle
to the remote pool which shall be used in subsequent API calls.
If any error prevents the \f[B]librpmem\f[](7) from opening the remote
pool, the \f[B]rpmem_open\f[]() returns NULL and sets \f[I]errno\f[]
appropriately.
If the \f[I]open_attr\f[] argument is not NULL the remote pool
attributes are returned by the provided structure.
.PP
The \f[B]rpmem_set_attr\f[]() function on success returns zero, on error
it returns \-1.
.PP
The \f[B]rpmem_close\f[]() function on success it returns zero, if any
error occurred when closing remote pool, non\-zero value is returned and
\f[I]errno\f[] value is set.
.PP
The \f[B]rpmem_remove\f[]() function returns 0 if the pool has been
removed successfully, otherwise non\-zero value is returned and
\f[I]errno\f[] set appropriately.
.SH NOTES
.SS REMOTE POOL SIZE
.PP
A remote pool size depends on the configuration of a pool set file on
the remote node.
The remote pool size is a sum of sizes of all part files decreased by
4096 bytes per each part file.
The 4096 bytes of each part file is utilized for storing internal
metadata of the pool part files.
The minimum size of a part file for a remote pool is defined as
\f[B]RPMEM_MIN_PART\f[] in \f[B]<librpmem.h>\f[].
The minimum size of a remote pool allowed by the library is defined as
\f[B]RPMEM_MIN_POOL\f[] therein.
.SS LANES
.PP
The term \f[I]lane\f[] means an isolated path of execution.
Due to a limited resources provided by underlying hardware utilized by
both local and remote nodes the maximum number of parallel
\f[B]rpmem_persist\f[](3) operations is limited by the maximum number of
lanes returned from either the \f[B]rpmem_open\f[]() or
\f[B]rpmem_create\f[]() function calls.
The caller passes the maximum number of lanes one would like to utilize.
If the pool has been successfully created or opened, the lanes value is
updated to the minimum of: the number of lanes requested by the caller
and the maximum number of lanes supported by underlying hardware.
The application is obligated to use at most the returned number of lanes
in parallel.
The \f[B]rpmem_persist\f[](3) does not provide any locking mechanism
thus the serialization of the calls shall be performed by the
application if required.
.PP
Each lane requires separate connection which is represented by the file
descriptor.
If system will run out of free file descriptors during
\f[B]rpmem_create\f[]() or \f[B]rpmem_open\f[]() these functions will
fail.
See \f[B]nofile\f[] in \f[B]limits.conf\f[](5) for more details.
.SH SEE ALSO
.PP
\f[B]rpmem_persist\f[](3), \f[B]sysconf\f[](3), \f[B]limits.conf\f[](5),
\f[B]libpmemobj\f[](7), \f[B]librpmem\f[](7) and
\f[B]<http://pmem.io>\f[]
