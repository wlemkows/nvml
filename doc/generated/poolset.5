.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "POOLSET" "5" "2017-11-07" "NVM Library - poolset API version 1.0" "NVML Programmer's Manual"
.hy
.\" Copyright 2014-2017, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
.PP
poolset \-\- persistent memory pool configuration file format
.SH SYNOPSIS
.IP
.nf
\f[C]
mypool.set
\f[]
.fi
.SH DESCRIPTION
.PP
Depending on the configuration of the system, the available space of
non\-volatile memory space may be divided into multiple memory devices.
In such case, the maximum size of the transactional object store could
be limited by the capacity of a single memory device.
.PP
The \f[B]libpmemobj\f[](7), \f[B]libpmemblk\f[] and \f[B]libpmemlog\f[]
allows building object stores spanning multiple memory devices by
creation of persistent memory pools consisting of multiple files, where
each part of such a \f[I]pool set\f[] may be stored on different
pmem\-aware filesystem.
.PP
In case of \f[B]libpmemobj\f[](7) to improve reliability and eliminate
the single point of failure, all the changes of the data stored in the
persistent memory pool could be also automatically written to local or
remote pool replicas, thereby providing a backup for a persistent memory
pool by producing a \f[I]mirrored pool set\f[].
In practice, the pool replicas may be considered as binary copies of the
"master" pool set.
Data replication is not supported in \f[B]libpmemblk\f[](7) and
\f[B]libpmemlog\f[](7).
.PP
The set file for each type of pool is a plain text file, which must
start with the line containing a \f[I]PMEMPOOLSET\f[] string, followed
by the specification of all the pool parts in the next lines.
For each part, the file size and the absolute path must be provided.
.PP
The size has to be compliant with the format specified in IEC 80000\-13,
IEEE 1541 or the Metric Interchange Format.
Standards accept SI units with obligatory B \- kB, MB, GB, ...
(multiplier by 1000) and IEC units with optional "iB" \- KiB, MiB, GiB,
..., K, M, G, ...
\- (multiplier by 1024).
.PP
The path of a part can point to a Device DAX and in such case the size
argument can be set to an "AUTO" string, which means that the size of
the device will be automatically resolved at pool creation time.
When using Device DAX there\[aq]s also one additional restriction \- it
is not allowed to concatenate more than one Device DAX device in a
single pool set if the configured internal alignment is other than 4KiB.
In such case a pool set can consist only of a single part (single Device
DAX).
Please see \f[B]ndctl\-create\-namespace\f[](1) for information on how
to configure desired alignment on Device DAX.
.PP
Device DAX is the device\-centric analogue of Filesystem DAX.
It allows memory ranges to be allocated and mapped without need of an
intervening file system.
For more information please see \f[B]ndctl\-create\-namespace\f[](1).
.PP
The minimum file size of each part of the pool set is defined in
\f[B]<libpmemblk.h>\f[] as \f[B]PMEMBLK_MIN_PART\f[] for block pool, in
\f[B]<libpmemobj.h>\f[] as \f[B]PMEMOBJ_MIN_PART\f[] for obj pool or in
\f[B]<libpmemlog.h>\f[] as \f[B]PMEMLOG_MIN_PART\f[] for log pool.
The net pool size of the pool set is equal to:
.IP
.nf
\f[C]
net_pool_size\ =\ sum_over_all_parts(page_aligned_part_size\ \-\ 4KiB)\ +\ 4KiB
\f[]
.fi
.PP
where
.IP
.nf
\f[C]
page_aligned_part_size\ =\ part_size\ &\ ~(page_size\ \-\ 1)
\f[]
.fi
.PP
Note that page size is OS specific.
For more information please see \f[B]sysconf\f[](3).
The minimum net pool size of a pool set allowed by the library for a
block pool is defined in \f[B]<libpmemblk.h>\f[] as
\f[B]PMEMBLK_MIN_POOL\f[], for log pool in \f[B]<libpmemlog.h>\f[] as
\f[B]PMEMLOG_MIN_POOL\f[] and in \f[B]<libpmemobj.h>\f[] as
\f[B]PMEMOBJ_MIN_POOL\f[] for obj pool.
Lines starting with "#" character are ignored.
.PP
Here is the example "myblkpool.set" file:
.IP
.nf
\f[C]
PMEMPOOLSET
100G\ /mountpoint0/myfile.part0
200G\ /mountpoint1/myfile.part1
400G\ /mountpoint2/myfile.part2
\f[]
.fi
.PP
The files in the set may be created by running one of the following
commands:
.IP
.nf
\f[C]
$\ pmempool\ create\ blk\ <bsize>\ myblkpool.set
\f[]
.fi
.PP
for block pool or for log pool:
.IP
.nf
\f[C]
$\ pmempool\ create\ log\ <bsize>\ mylogpool.set
\f[]
.fi
.RS
.PP
WARNING: Creation of all the parts of the pool set and the associated
replica sets can be done with the \f[B]pmemobj_create\f[](3),
\f[B]pmemblk_create\f[](3), \f[B]pmemlog_create\f[](3) function or by
using the \f[B]pmempool\f[](1) utility.
.RE
.PP
Restoring data from a local or remote replica can be done by using the
\f[B]pmempool\-sync\f[](1) command or \f[B]pmempool_sync\f[]() API from
the \f[B]libpmempool\f[](3) library.
.PP
Modifications of a pool set file configuration can be done by using the
\f[B]pmempool\-transform\f[](1) command or \f[B]pmempool_transform\f[]()
API from the \f[B]libpmempool\f[](3) library.
.PP
When creating the pool set consisting of multiple files, or when
creating the replicated pool set, the \f[I]path\f[] argument passed to
\f[B]pmemobj_create\f[](3), \f[B]pmemblk_create\f[](3),
\f[B]pmemlog_create\f[](3) must point to the special \f[I]set\f[] file
that defines the pool layout and the location of all the parts of the
pool set.
.PP
When opening the pool set consisting of multiple files, or when opening
the replicated pool set, the \f[I]path\f[] argument passed to
\f[B]pmemobj_create\f[](3), \f[B]pmemblk_create\f[](3),
\f[B]pmemlog_create\f[](3) must not point to the pmemobj, pmemblk or
pmemlog memory pool file, but to the same \f[I]set\f[] file that was
used for the pool set creation.
If an error prevents any of the pool set files from being opened, or if
the actual size of any file does not match the corresponding part size
defined in \f[I]set\f[] file \f[B]pmemobj_create\f[](3),
\f[B]pmemblk_create\f[](3) or \f[B]pmemlog_create\f[](3) return NULL and
set \f[I]errno\f[] appropriately.
.PP
Sections defining the replica sets are optional.
There could be multiple replica sections and each must start with the
line containing a \f[I]REPLICA\f[] string.
Lines starting with "#" character are ignored.
A replica can be local or remote.
In case of a local replica, the REPLICA line has to consist of the
\f[I]REPLICA\f[] string only and it has to be followed by at least one
line defining a part of the local replica.
The format of such line is the same as the format of the line defining a
part of the pool as described above.
.PP
In case of a remote replica, the \f[I]REPLICA\f[] keyword has to be
followed by an address of a remote host (in the format recognized by the
\f[B]ssh\f[](1) remote login client) and a relative path to a remote
pool set file (located in the root config directory on the target node
\- see \f[B]librpmem\f[](3)):
.IP
.nf
\f[C]
REPLICA\ [<user>\@]<hostname>\ [<relative\-path>/]<remote\-pool\-set\-file>
\f[]
.fi
.PP
There are no other lines in the remote replica section \- the REPLICA
line defines a remote replica entirely.
Here is the example of "myobjpool.set" file:
.IP
.nf
\f[C]
PMEMPOOLSET
100G\ /mountpoint0/myfile.part0
200G\ /mountpoint1/myfile.part1
400G\ /mountpoint2/myfile.part2

#\ local\ replica
REPLICA
500G\ /mountpoint3/mymirror.part0
200G\ /mountpoint4/mymirror.part1

#\ remote\ replica
REPLICA\ user\@example.com\ remote\-objpool.set
\f[]
.fi
.PP
The files in the obj set may be created by running the following
command:
.IP
.nf
\f[C]
$\ pmempool\ create\ \-\-layout="mylayout"\ obj\ myobjpool.set
\f[]
.fi
.SH SEE ALSO
.PP
\f[B]ndctl\-create\-namespace\f[](1), \f[B]pmemblk_create\f[](3),
\f[B]pmemlog_create\f[](3), \f[B]pmemobj_create\f[](3),
\f[B]sysconf\f[](3), \f[B]libpmemblk\f[](7), \f[B]libpmemlog\f[](7),
\f[B]libpmemobj\f[](7) and \f[B]<http://pmem.io>\f[]
