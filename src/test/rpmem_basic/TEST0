#!/bin/bash -e
#
# Copyright 2016, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#     * Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

#
# src/test/rpmem_basic/TEST0 -- unit test for rpmem create request
#
export UNITTEST_NAME=rpmem_basic/TEST0
export UNITTEST_NUM=0

# standard unit test setup
. ../unittest/unittest.sh

require_fs_type any
require_build_type nondebug debug

rpmem_foreach_provider
rpmem_foreach_persist

setup

. setup.sh

cat > $DIR/pool0.set << EOF
PMEMPOOLSET
8M $PART_DIR/pool0.part0
8M $PART_DIR/pool0.part1
EOF

cat > $DIR/pool1.set << EOF
PMEMPOOLSET
16M $PART_DIR/pool1.part0
EOF

cat > $DIR/pool2.set << EOF
PMEMPOOLSET
16M $PART_DIR/pool2.part0
EOF

cat > $DIR/pool3.set << EOF
PMEMPOOLSET
8M $PART_DIR/pool3.part0
8M $PART_DIR/pool3.part1
EOF

# Pool set file with duplicated part file
cat > $DIR/pool4.set << EOF
PMEMPOOLSET
8M $PART_DIR/pool3.part0
8M $PART_DIR/pool4.part1
EOF

expect_normal_exit run_on_node 0 mkdir -p $POOLS_DIR
expect_normal_exit run_on_node 0 mkdir -p $POOLS_DIR/subdir
expect_normal_exit run_on_node 0 mkdir -p $POOLS_PART
expect_normal_exit copy_file_to_node 0 $DIR/pool0.set $POOLS_DIR
expect_normal_exit copy_file_to_node 0 $DIR/pool0.set $POOLS_DIR/pool0r.set
# Remove read permission
expect_normal_exit run_on_node 0 chmod a-r $POOLS_DIR/pool0r.set
expect_normal_exit copy_file_to_node 0 $DIR/pool1.set $POOLS_DIR
expect_normal_exit copy_file_to_node 0 $DIR/pool2.set $POOLS_DIR/subdir/
expect_normal_exit copy_file_to_node 0 $DIR/pool3.set $POOLS_DIR
expect_normal_exit copy_file_to_node 0 $DIR/pool4.set $POOLS_DIR

# Create pool from non-existing pool set file
ARGS="$ARGS test_create 0 poolX.set ${NODE_ADDR[0]} pool 8M"
# Create pool from pool set file which can't be read
ARGS="$ARGS test_create 0 pool0r.set ${NODE_ADDR[0]} pool 8M"
# Create too big pool
ARGS="$ARGS test_create 0 pool0.set ${NODE_ADDR[0]} pool 32M"
# Create pool and close it - local pool from file
ARGS="$ARGS test_create 0 pool0.set ${NODE_ADDR[0]} pool 8M test_close 0"
# Create already existing pool
ARGS="$ARGS test_create 0 pool0.set ${NODE_ADDR[0]} pool 8M"
# Create pool and close it - local pool from memory
ARGS="$ARGS test_create 0 pool1.set ${NODE_ADDR[0]} mem 8M test_close 0"
# Create pool from pool set with subdirectory
ARGS="$ARGS test_create 0 subdir/pool2.set ${NODE_ADDR[0]} mem 8M test_close 0"
# Create pool but don't close it immediately
ARGS="$ARGS test_create 0 pool3.set ${NODE_ADDR[0]} mem 8M"
# Create already created and not closed pool
ARGS="$ARGS test_create 1 pool3.set ${NODE_ADDR[0]} mem 8M"
# Create pool from pool set which has duplicated part file
ARGS="$ARGS test_create 2 pool4.set ${NODE_ADDR[0]} mem 8M"
# Close previously created pool
ARGS="$ARGS test_close 0"

expect_normal_exit run_on_node 1 ./rpmem_basic$EXESUFFIX $ARGS

check

pass
